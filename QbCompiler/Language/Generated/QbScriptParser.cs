//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G:\Development\QbCompiler\QbCompiler\grammars\QbScript.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QbScript.Language {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QbScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		WS=25, RWORD=26, HEXINT=27, DECIMAL=28, EXPONENT=29, ID=30, CHECKSUM=31, 
		NSTRING=32, WSTRING=33, INT=34, FLOAT=35;
	public const int
		RULE_number = 0, RULE_qbKey = 1, RULE_literal = 2, RULE_vec2 = 3, RULE_vec3 = 4, 
		RULE_qbStruct = 5, RULE_qbStructItem = 6, RULE_qbType = 7, RULE_qbStructLit = 8, 
		RULE_qbStructArray = 9, RULE_testLit = 10;
	public static readonly string[] ruleNames = {
		"number", "qbKey", "literal", "vec2", "vec3", "qbStruct", "qbStructItem", 
		"qbType", "qbStructLit", "qbStructArray", "testLit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_'", "'('", "','", "')'", "'{'", "'}'", "'='", "';'", "'int'", 
		"'float'", "'string'", "'wstring'", "'vec2'", "'vec3'", "'struct'", "'array'", 
		"'<'", "'>'", "'qbkey'", "'qbkeyref'", "'stringptr'", "'qbkeystringqs'", 
		"'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WS", "RWORD", "HEXINT", "DECIMAL", "EXPONENT", "ID", "CHECKSUM", 
		"NSTRING", "WSTRING", "INT", "FLOAT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QbScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QbScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public QbScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(QbScriptParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(QbScriptParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 0, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QbKeyContext : ParserRuleContext {
		public QbKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qbKey; } }
	 
		public QbKeyContext() { }
		public virtual void CopyFrom(QbKeyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QbKeyNullContext : QbKeyContext {
		public QbKeyNullContext(QbKeyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbKeyNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QbKeyCrcContext : QbKeyContext {
		public ITerminalNode CHECKSUM() { return GetToken(QbScriptParser.CHECKSUM, 0); }
		public QbKeyCrcContext(QbKeyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbKeyCrc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QbKeyIdContext : QbKeyContext {
		public ITerminalNode ID() { return GetToken(QbScriptParser.ID, 0); }
		public QbKeyIdContext(QbKeyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbKeyId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QbKeyContext qbKey() {
		QbKeyContext _localctx = new QbKeyContext(Context, State);
		EnterRule(_localctx, 2, RULE_qbKey);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new QbKeyIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(ID);
				}
				break;
			case CHECKSUM:
				_localctx = new QbKeyCrcContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; Match(CHECKSUM);
				}
				break;
			case T__0:
				_localctx = new QbKeyNullContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 26; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LitIntContext : LiteralContext {
		public ITerminalNode INT() { return GetToken(QbScriptParser.INT, 0); }
		public LitIntContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitQbKeyContext : LiteralContext {
		public QbKeyContext qbKey() {
			return GetRuleContext<QbKeyContext>(0);
		}
		public LitQbKeyContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitQbKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitFloatContext : LiteralContext {
		public ITerminalNode FLOAT() { return GetToken(QbScriptParser.FLOAT, 0); }
		public LitFloatContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitStructContext : LiteralContext {
		public QbStructContext qbStruct() {
			return GetRuleContext<QbStructContext>(0);
		}
		public LitStructContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitHexContext : LiteralContext {
		public ITerminalNode HEXINT() { return GetToken(QbScriptParser.HEXINT, 0); }
		public LitHexContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitHex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitVec2Context : LiteralContext {
		public Vec2Context vec2() {
			return GetRuleContext<Vec2Context>(0);
		}
		public LitVec2Context(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitVec2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitNStringContext : LiteralContext {
		public ITerminalNode NSTRING() { return GetToken(QbScriptParser.NSTRING, 0); }
		public LitNStringContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitNString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitVec3Context : LiteralContext {
		public Vec3Context vec3() {
			return GetRuleContext<Vec3Context>(0);
		}
		public LitVec3Context(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitVec3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitWStringContext : LiteralContext {
		public ITerminalNode WSTRING() { return GetToken(QbScriptParser.WSTRING, 0); }
		public LitWStringContext(LiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLitWString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_literal);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new LitIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; Match(INT);
				}
				break;
			case 2:
				_localctx = new LitFloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; Match(FLOAT);
				}
				break;
			case 3:
				_localctx = new LitHexContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 31; Match(HEXINT);
				}
				break;
			case 4:
				_localctx = new LitQbKeyContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 32; qbKey();
				}
				break;
			case 5:
				_localctx = new LitVec2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 33; vec2();
				}
				break;
			case 6:
				_localctx = new LitVec3Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 34; vec3();
				}
				break;
			case 7:
				_localctx = new LitNStringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 35; Match(NSTRING);
				}
				break;
			case 8:
				_localctx = new LitWStringContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 36; Match(WSTRING);
				}
				break;
			case 9:
				_localctx = new LitStructContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 37; qbStruct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vec2Context : ParserRuleContext {
		public NumberContext x;
		public NumberContext y;
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public Vec2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vec2; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVec2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vec2Context vec2() {
		Vec2Context _localctx = new Vec2Context(Context, State);
		EnterRule(_localctx, 6, RULE_vec2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__1);
			State = 41; _localctx.x = number();
			State = 42; Match(T__2);
			State = 43; _localctx.y = number();
			State = 44; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vec3Context : ParserRuleContext {
		public NumberContext x;
		public NumberContext y;
		public NumberContext z;
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public Vec3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vec3; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVec3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vec3Context vec3() {
		Vec3Context _localctx = new Vec3Context(Context, State);
		EnterRule(_localctx, 8, RULE_vec3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__1);
			State = 47; _localctx.x = number();
			State = 48; Match(T__2);
			State = 49; _localctx.y = number();
			State = 50; Match(T__2);
			State = 51; _localctx.z = number();
			State = 52; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QbStructContext : ParserRuleContext {
		public QbStructItemContext[] qbStructItem() {
			return GetRuleContexts<QbStructItemContext>();
		}
		public QbStructItemContext qbStructItem(int i) {
			return GetRuleContext<QbStructItemContext>(i);
		}
		public QbStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qbStruct; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QbStructContext qbStruct() {
		QbStructContext _localctx = new QbStructContext(Context, State);
		EnterRule(_localctx, 10, RULE_qbStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(T__4);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 55; qbStructItem();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0) );
			State = 60; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QbStructItemContext : ParserRuleContext {
		public QbTypeContext qbType() {
			return GetRuleContext<QbTypeContext>(0);
		}
		public QbKeyContext qbKey() {
			return GetRuleContext<QbKeyContext>(0);
		}
		public QbStructLitContext qbStructLit() {
			return GetRuleContext<QbStructLitContext>(0);
		}
		public QbStructItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qbStructItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbStructItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QbStructItemContext qbStructItem() {
		QbStructItemContext _localctx = new QbStructItemContext(Context, State);
		EnterRule(_localctx, 12, RULE_qbStructItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; qbType();
			State = 63; qbKey();
			State = 64; Match(T__6);
			State = 65; qbStructLit();
			State = 66; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QbTypeContext : ParserRuleContext {
		public QbTypeContext qbType() {
			return GetRuleContext<QbTypeContext>(0);
		}
		public QbTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qbType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QbTypeContext qbType() {
		QbTypeContext _localctx = new QbTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_qbType);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; Match(T__10);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 71; Match(T__11);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 72; Match(T__12);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 73; Match(T__13);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 7);
				{
				State = 74; Match(T__14);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 8);
				{
				State = 75; Match(T__15);
				State = 76; Match(T__16);
				State = 77; qbType();
				State = 78; Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 9);
				{
				State = 80; Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 10);
				{
				State = 81; Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 11);
				{
				State = 82; Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 12);
				{
				State = 83; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QbStructLitContext : ParserRuleContext {
		public QbStructLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qbStructLit; } }
	 
		public QbStructLitContext() { }
		public virtual void CopyFrom(QbStructLitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QbSSmallLitContext : QbStructLitContext {
		public ITerminalNode INT() { return GetToken(QbScriptParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(QbScriptParser.FLOAT, 0); }
		public QbKeyContext qbKey() {
			return GetRuleContext<QbKeyContext>(0);
		}
		public QbSSmallLitContext(QbStructLitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbSSmallLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QbSFloatLitContext : QbStructLitContext {
		public Vec2Context vec2() {
			return GetRuleContext<Vec2Context>(0);
		}
		public Vec3Context vec3() {
			return GetRuleContext<Vec3Context>(0);
		}
		public QbSFloatLitContext(QbStructLitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbSFloatLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QbSArrayLitContext : QbStructLitContext {
		public QbStructArrayContext qbStructArray() {
			return GetRuleContext<QbStructArrayContext>(0);
		}
		public QbSArrayLitContext(QbStructLitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbSArrayLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QbSBigLitContext : QbStructLitContext {
		public ITerminalNode NSTRING() { return GetToken(QbScriptParser.NSTRING, 0); }
		public ITerminalNode WSTRING() { return GetToken(QbScriptParser.WSTRING, 0); }
		public QbStructContext qbStruct() {
			return GetRuleContext<QbStructContext>(0);
		}
		public QbSBigLitContext(QbStructLitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbSBigLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QbStructLitContext qbStructLit() {
		QbStructLitContext _localctx = new QbStructLitContext(Context, State);
		EnterRule(_localctx, 16, RULE_qbStructLit);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new QbSSmallLitContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(INT);
				}
				break;
			case 2:
				_localctx = new QbSSmallLitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(FLOAT);
				}
				break;
			case 3:
				_localctx = new QbSSmallLitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; qbKey();
				}
				break;
			case 4:
				_localctx = new QbSFloatLitContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; vec2();
				}
				break;
			case 5:
				_localctx = new QbSFloatLitContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; vec3();
				}
				break;
			case 6:
				_localctx = new QbSBigLitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; Match(NSTRING);
				}
				break;
			case 7:
				_localctx = new QbSBigLitContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; Match(WSTRING);
				}
				break;
			case 8:
				_localctx = new QbSBigLitContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 93; qbStruct();
				}
				break;
			case 9:
				_localctx = new QbSArrayLitContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 94; qbStructArray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QbStructArrayContext : ParserRuleContext {
		public QbStructLitContext[] qbStructLit() {
			return GetRuleContexts<QbStructLitContext>();
		}
		public QbStructLitContext qbStructLit(int i) {
			return GetRuleContext<QbStructLitContext>(i);
		}
		public QbStructArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qbStructArray; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQbStructArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QbStructArrayContext qbStructArray() {
		QbStructArrayContext _localctx = new QbStructArrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_qbStructArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(T__22);
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				}
				break;
			case T__0:
			case T__1:
			case T__4:
			case T__22:
			case ID:
			case CHECKSUM:
			case NSTRING:
			case WSTRING:
			case INT:
			case FLOAT:
				{
				State = 99; qbStructLit();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 100; Match(T__2);
					State = 101; qbStructLit();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 109; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestLitContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(QbScriptParser.Eof, 0); }
		public TestLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testLit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQbScriptVisitor<TResult> typedVisitor = visitor as IQbScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestLitContext testLit() {
		TestLitContext _localctx = new TestLitContext(Context, State);
		EnterRule(_localctx, 20, RULE_testLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; literal();
			State = 112; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3%u\x4");
		sb.Append("\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t");
		sb.Append("\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2");
		sb.Append("\x3\x3\x3\x3\x3\x3\x5\x3\x1E\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4)\n\x4\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\a\x3\a\x6\a;\n\a\r\a\xE\a<\x3\a\x3\a\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tW\n\t\x3\n\x3\n\x3\n\x3");
		sb.Append("\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x62\n\n\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x3\v\a\vi\n\v\f\v\xE\vl\v\v\x5\vn\n\v\x3\v\x3\v\x3\f\x3\f\x3");
		sb.Append("\f\x3\f\x2\x2\r\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x2\x3\x3\x2");
		sb.Append("$%\x89\x2\x18\x3\x2\x2\x2\x4\x1D\x3\x2\x2\x2\x6(\x3\x2\x2\x2");
		sb.Append("\b*\x3\x2\x2\x2\n\x30\x3\x2\x2\x2\f\x38\x3\x2\x2\x2\xE@\x3\x2");
		sb.Append("\x2\x2\x10V\x3\x2\x2\x2\x12\x61\x3\x2\x2\x2\x14\x63\x3\x2\x2");
		sb.Append("\x2\x16q\x3\x2\x2\x2\x18\x19\t\x2\x2\x2\x19\x3\x3\x2\x2\x2\x1A");
		sb.Append("\x1E\a \x2\x2\x1B\x1E\a!\x2\x2\x1C\x1E\a\x3\x2\x2\x1D\x1A\x3");
		sb.Append("\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1C\x3\x2\x2\x2\x1E\x5\x3");
		sb.Append("\x2\x2\x2\x1F)\a$\x2\x2 )\a%\x2\x2!)\a\x1D\x2\x2\")\x5\x4\x3");
		sb.Append("\x2#)\x5\b\x5\x2$)\x5\n\x6\x2%)\a\"\x2\x2&)\a#\x2\x2\')\x5\f");
		sb.Append("\a\x2(\x1F\x3\x2\x2\x2( \x3\x2\x2\x2(!\x3\x2\x2\x2(\"\x3\x2");
		sb.Append("\x2\x2(#\x3\x2\x2\x2($\x3\x2\x2\x2(%\x3\x2\x2\x2(&\x3\x2\x2");
		sb.Append("\x2(\'\x3\x2\x2\x2)\a\x3\x2\x2\x2*+\a\x4\x2\x2+,\x5\x2\x2\x2");
		sb.Append(",-\a\x5\x2\x2-.\x5\x2\x2\x2./\a\x6\x2\x2/\t\x3\x2\x2\x2\x30");
		sb.Append("\x31\a\x4\x2\x2\x31\x32\x5\x2\x2\x2\x32\x33\a\x5\x2\x2\x33\x34");
		sb.Append("\x5\x2\x2\x2\x34\x35\a\x5\x2\x2\x35\x36\x5\x2\x2\x2\x36\x37");
		sb.Append("\a\x6\x2\x2\x37\v\x3\x2\x2\x2\x38:\a\a\x2\x2\x39;\x5\xE\b\x2");
		sb.Append(":\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2");
		sb.Append("=>\x3\x2\x2\x2>?\a\b\x2\x2?\r\x3\x2\x2\x2@\x41\x5\x10\t\x2\x41");
		sb.Append("\x42\x5\x4\x3\x2\x42\x43\a\t\x2\x2\x43\x44\x5\x12\n\x2\x44\x45");
		sb.Append("\a\n\x2\x2\x45\xF\x3\x2\x2\x2\x46W\a\v\x2\x2GW\a\f\x2\x2HW\a");
		sb.Append("\r\x2\x2IW\a\xE\x2\x2JW\a\xF\x2\x2KW\a\x10\x2\x2LW\a\x11\x2");
		sb.Append("\x2MN\a\x12\x2\x2NO\a\x13\x2\x2OP\x5\x10\t\x2PQ\a\x14\x2\x2");
		sb.Append("QW\x3\x2\x2\x2RW\a\x15\x2\x2SW\a\x16\x2\x2TW\a\x17\x2\x2UW\a");
		sb.Append("\x18\x2\x2V\x46\x3\x2\x2\x2VG\x3\x2\x2\x2VH\x3\x2\x2\x2VI\x3");
		sb.Append("\x2\x2\x2VJ\x3\x2\x2\x2VK\x3\x2\x2\x2VL\x3\x2\x2\x2VM\x3\x2");
		sb.Append("\x2\x2VR\x3\x2\x2\x2VS\x3\x2\x2\x2VT\x3\x2\x2\x2VU\x3\x2\x2");
		sb.Append("\x2W\x11\x3\x2\x2\x2X\x62\a$\x2\x2Y\x62\a%\x2\x2Z\x62\x5\x4");
		sb.Append("\x3\x2[\x62\x5\b\x5\x2\\\x62\x5\n\x6\x2]\x62\a\"\x2\x2^\x62");
		sb.Append("\a#\x2\x2_\x62\x5\f\a\x2`\x62\x5\x14\v\x2\x61X\x3\x2\x2\x2\x61");
		sb.Append("Y\x3\x2\x2\x2\x61Z\x3\x2\x2\x2\x61[\x3\x2\x2\x2\x61\\\x3\x2");
		sb.Append("\x2\x2\x61]\x3\x2\x2\x2\x61^\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x61");
		sb.Append("`\x3\x2\x2\x2\x62\x13\x3\x2\x2\x2\x63m\a\x19\x2\x2\x64n\x3\x2");
		sb.Append("\x2\x2\x65j\x5\x12\n\x2\x66g\a\x5\x2\x2gi\x5\x12\n\x2h\x66\x3");
		sb.Append("\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2kn\x3\x2");
		sb.Append("\x2\x2lj\x3\x2\x2\x2m\x64\x3\x2\x2\x2m\x65\x3\x2\x2\x2no\x3");
		sb.Append("\x2\x2\x2op\a\x1A\x2\x2p\x15\x3\x2\x2\x2qr\x5\x6\x4\x2rs\a\x2");
		sb.Append("\x2\x3s\x17\x3\x2\x2\x2\t\x1D(<V\x61jm");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace QbScript.Language
