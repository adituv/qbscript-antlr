//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from G:\Development\QbCompiler\QbCompiler\grammars\QbScript.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QbScript.Language {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QbScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		WS=25, RWORD=26, DIGIT=27, HEXINT=28, DECIMAL=29, EXPONENT=30, ID=31, 
		CHECKSUM=32, NSTRING=33, WSTRING=34, INT=35, FLOAT=36, NUMBER=37;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "WS", "RWORD", 
		"LETTER", "DIGIT", "HEXINT", "HEXDIGIT", "DECIMAL", "EXPONENT", "ID", 
		"CHECKSUM", "NSTRING", "WSTRING", "INT", "FLOAT", "NUMBER"
	};


	public QbScriptLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'_'", "'('", "','", "')'", "'{'", "'}'", "'='", "';'", "'int'", 
		"'float'", "'string'", "'wstring'", "'vec2'", "'vec3'", "'struct'", "'array'", 
		"'<'", "'>'", "'qbkey'", "'qbkeyref'", "'stringptr'", "'qbkeystringqs'", 
		"'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WS", "RWORD", "DIGIT", "HEXINT", "DECIMAL", "EXPONENT", "ID", "CHECKSUM", 
		"NSTRING", "WSTRING", "INT", "FLOAT", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QbScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QbScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\'\x16B");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6");
		sb.Append("\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r");
		sb.Append("\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3");
		sb.Append("\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3");
		sb.Append("\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17");
		sb.Append("\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3");
		sb.Append("\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xFD\n\x1B");
		sb.Append("\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5");
		sb.Append("\x1E\x107\n\x1E\x3\x1E\x6\x1E\x10A\n\x1E\r\x1E\xE\x1E\x10B\x3");
		sb.Append("\x1F\x6\x1F\x10F\n\x1F\r\x1F\xE\x1F\x110\x3 \x3 \x6 \x115\n");
		sb.Append(" \r \xE \x116\x3!\x3!\x5!\x11B\n!\x3!\x6!\x11E\n!\r!\xE!\x11F");
		sb.Append("\x3\"\x3\"\x3\"\x3\"\a\"\x126\n\"\f\"\xE\"\x129\v\"\x3#\x3#");
		sb.Append("\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\a$\x139\n$");
		sb.Append("\f$\xE$\x13C\v$\x3$\x3$\x3%\x3%\x3%\a%\x143\n%\f%\xE%\x146\v");
		sb.Append("%\x3%\x3%\x3&\x5&\x14B\n&\x3&\x6&\x14E\n&\r&\xE&\x14F\x3\'\x5");
		sb.Append("\'\x153\n\'\x3\'\a\'\x156\n\'\f\'\xE\'\x159\v\'\x3\'\x3\'\x5");
		sb.Append("\'\x15D\n\'\x3\'\x6\'\x160\n\'\r\'\xE\'\x161\x3\'\x3\'\x5\'");
		sb.Append("\x166\n\'\x3(\x3(\x5(\x16A\n(\x2\x2)\x3\x3\x5\x4\a\x5\t\x6\v");
		sb.Append("\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F");
		sb.Append("\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B");
		sb.Append("\x35\x1C\x37\x2\x39\x1D;\x1E=\x2?\x1F\x41 \x43!\x45\"G#I$K%");
		sb.Append("M&O\'\x3\x2\n\x5\x2\v\f\xF\xF\"\"\x4\x2\x43\\\x63|\x3\x2\x32");
		sb.Append(";\x5\x2\x32;\x43H\x63h\x4\x2GGgg\x4\x2--//\x5\x2\f\f\xF\xF)");
		sb.Append(")\x5\x2\f\f\xF\xF$$\x186\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2");
		sb.Append("\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3");
		sb.Append("\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2");
		sb.Append("\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2");
		sb.Append("\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2");
		sb.Append("\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2");
		sb.Append("\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3");
		sb.Append("\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2");
		sb.Append("\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2");
		sb.Append("\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3");
		sb.Append("\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2");
		sb.Append("O\x3\x2\x2\x2\x3Q\x3\x2\x2\x2\x5S\x3\x2\x2\x2\aU\x3\x2\x2\x2");
		sb.Append("\tW\x3\x2\x2\x2\vY\x3\x2\x2\x2\r[\x3\x2\x2\x2\xF]\x3\x2\x2\x2");
		sb.Append("\x11_\x3\x2\x2\x2\x13\x61\x3\x2\x2\x2\x15\x65\x3\x2\x2\x2\x17");
		sb.Append("k\x3\x2\x2\x2\x19r\x3\x2\x2\x2\x1Bz\x3\x2\x2\x2\x1D\x7F\x3\x2");
		sb.Append("\x2\x2\x1F\x84\x3\x2\x2\x2!\x8B\x3\x2\x2\x2#\x91\x3\x2\x2\x2");
		sb.Append("%\x93\x3\x2\x2\x2\'\x95\x3\x2\x2\x2)\x9B\x3\x2\x2\x2+\xA4\x3");
		sb.Append("\x2\x2\x2-\xAE\x3\x2\x2\x2/\xBC\x3\x2\x2\x2\x31\xBE\x3\x2\x2");
		sb.Append("\x2\x33\xC0\x3\x2\x2\x2\x35\xFC\x3\x2\x2\x2\x37\xFE\x3\x2\x2");
		sb.Append("\x2\x39\x100\x3\x2\x2\x2;\x106\x3\x2\x2\x2=\x10E\x3\x2\x2\x2");
		sb.Append("?\x112\x3\x2\x2\x2\x41\x118\x3\x2\x2\x2\x43\x121\x3\x2\x2\x2");
		sb.Append("\x45\x12A\x3\x2\x2\x2G\x134\x3\x2\x2\x2I\x13F\x3\x2\x2\x2K\x14A");
		sb.Append("\x3\x2\x2\x2M\x152\x3\x2\x2\x2O\x169\x3\x2\x2\x2QR\a\x61\x2");
		sb.Append("\x2R\x4\x3\x2\x2\x2ST\a*\x2\x2T\x6\x3\x2\x2\x2UV\a.\x2\x2V\b");
		sb.Append("\x3\x2\x2\x2WX\a+\x2\x2X\n\x3\x2\x2\x2YZ\a}\x2\x2Z\f\x3\x2\x2");
		sb.Append("\x2[\\\a\x7F\x2\x2\\\xE\x3\x2\x2\x2]^\a?\x2\x2^\x10\x3\x2\x2");
		sb.Append("\x2_`\a=\x2\x2`\x12\x3\x2\x2\x2\x61\x62\ak\x2\x2\x62\x63\ap");
		sb.Append("\x2\x2\x63\x64\av\x2\x2\x64\x14\x3\x2\x2\x2\x65\x66\ah\x2\x2");
		sb.Append("\x66g\an\x2\x2gh\aq\x2\x2hi\a\x63\x2\x2ij\av\x2\x2j\x16\x3\x2");
		sb.Append("\x2\x2kl\au\x2\x2lm\av\x2\x2mn\at\x2\x2no\ak\x2\x2op\ap\x2\x2");
		sb.Append("pq\ai\x2\x2q\x18\x3\x2\x2\x2rs\ay\x2\x2st\au\x2\x2tu\av\x2\x2");
		sb.Append("uv\at\x2\x2vw\ak\x2\x2wx\ap\x2\x2xy\ai\x2\x2y\x1A\x3\x2\x2\x2");
		sb.Append("z{\ax\x2\x2{|\ag\x2\x2|}\a\x65\x2\x2}~\a\x34\x2\x2~\x1C\x3\x2");
		sb.Append("\x2\x2\x7F\x80\ax\x2\x2\x80\x81\ag\x2\x2\x81\x82\a\x65\x2\x2");
		sb.Append("\x82\x83\a\x35\x2\x2\x83\x1E\x3\x2\x2\x2\x84\x85\au\x2\x2\x85");
		sb.Append("\x86\av\x2\x2\x86\x87\at\x2\x2\x87\x88\aw\x2\x2\x88\x89\a\x65");
		sb.Append("\x2\x2\x89\x8A\av\x2\x2\x8A \x3\x2\x2\x2\x8B\x8C\a\x63\x2\x2");
		sb.Append("\x8C\x8D\at\x2\x2\x8D\x8E\at\x2\x2\x8E\x8F\a\x63\x2\x2\x8F\x90");
		sb.Append("\a{\x2\x2\x90\"\x3\x2\x2\x2\x91\x92\a>\x2\x2\x92$\x3\x2\x2\x2");
		sb.Append("\x93\x94\a@\x2\x2\x94&\x3\x2\x2\x2\x95\x96\as\x2\x2\x96\x97");
		sb.Append("\a\x64\x2\x2\x97\x98\am\x2\x2\x98\x99\ag\x2\x2\x99\x9A\a{\x2");
		sb.Append("\x2\x9A(\x3\x2\x2\x2\x9B\x9C\as\x2\x2\x9C\x9D\a\x64\x2\x2\x9D");
		sb.Append("\x9E\am\x2\x2\x9E\x9F\ag\x2\x2\x9F\xA0\a{\x2\x2\xA0\xA1\at\x2");
		sb.Append("\x2\xA1\xA2\ag\x2\x2\xA2\xA3\ah\x2\x2\xA3*\x3\x2\x2\x2\xA4\xA5");
		sb.Append("\au\x2\x2\xA5\xA6\av\x2\x2\xA6\xA7\at\x2\x2\xA7\xA8\ak\x2\x2");
		sb.Append("\xA8\xA9\ap\x2\x2\xA9\xAA\ai\x2\x2\xAA\xAB\ar\x2\x2\xAB\xAC");
		sb.Append("\av\x2\x2\xAC\xAD\at\x2\x2\xAD,\x3\x2\x2\x2\xAE\xAF\as\x2\x2");
		sb.Append("\xAF\xB0\a\x64\x2\x2\xB0\xB1\am\x2\x2\xB1\xB2\ag\x2\x2\xB2\xB3");
		sb.Append("\a{\x2\x2\xB3\xB4\au\x2\x2\xB4\xB5\av\x2\x2\xB5\xB6\at\x2\x2");
		sb.Append("\xB6\xB7\ak\x2\x2\xB7\xB8\ap\x2\x2\xB8\xB9\ai\x2\x2\xB9\xBA");
		sb.Append("\as\x2\x2\xBA\xBB\au\x2\x2\xBB.\x3\x2\x2\x2\xBC\xBD\a]\x2\x2");
		sb.Append("\xBD\x30\x3\x2\x2\x2\xBE\xBF\a_\x2\x2\xBF\x32\x3\x2\x2\x2\xC0");
		sb.Append("\xC1\t\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\b\x1A\x2\x2\xC3");
		sb.Append("\x34\x3\x2\x2\x2\xC4\xC5\ak\x2\x2\xC5\xFD\ah\x2\x2\xC6\xC7\a");
		sb.Append("g\x2\x2\xC7\xC8\an\x2\x2\xC8\xC9\au\x2\x2\xC9\xFD\ag\x2\x2\xCA");
		sb.Append("\xCB\ag\x2\x2\xCB\xCC\an\x2\x2\xCC\xCD\ak\x2\x2\xCD\xFD\ah\x2");
		sb.Append("\x2\xCE\xCF\ag\x2\x2\xCF\xD0\an\x2\x2\xD0\xD1\au\x2\x2\xD1\xD2");
		sb.Append("\ag\x2\x2\xD2\xD3\ak\x2\x2\xD3\xFD\ah\x2\x2\xD4\xD5\at\x2\x2");
		sb.Append("\xD5\xD6\ag\x2\x2\xD6\xD7\ar\x2\x2\xD7\xD8\ag\x2\x2\xD8\xD9");
		sb.Append("\a\x63\x2\x2\xD9\xFD\av\x2\x2\xDA\xDB\au\x2\x2\xDB\xDC\ay\x2");
		sb.Append("\x2\xDC\xDD\ak\x2\x2\xDD\xDE\av\x2\x2\xDE\xDF\a\x65\x2\x2\xDF");
		sb.Append("\xFD\aj\x2\x2\xE0\xE1\a\x65\x2\x2\xE1\xE2\a\x63\x2\x2\xE2\xE3");
		sb.Append("\au\x2\x2\xE3\xFD\ag\x2\x2\xE4\xE5\a\x66\x2\x2\xE5\xE6\ag\x2");
		sb.Append("\x2\xE6\xE7\ah\x2\x2\xE7\xE8\a\x63\x2\x2\xE8\xE9\aw\x2\x2\xE9");
		sb.Append("\xEA\an\x2\x2\xEA\xFD\av\x2\x2\xEB\xEC\ai\x2\x2\xEC\xED\aq\x2");
		sb.Append("\x2\xED\xEE\av\x2\x2\xEE\xEF\aq\x2\x2\xEF\xF0\a\x61\x2\x2\xF0");
		sb.Append("\xF1\at\x2\x2\xF1\xF2\a\x63\x2\x2\xF2\xF3\ap\x2\x2\xF3\xF4\a");
		sb.Append("\x66\x2\x2\xF4\xF5\aq\x2\x2\xF5\xFD\ao\x2\x2\xF6\xF7\au\x2\x2");
		sb.Append("\xF7\xF8\a\x65\x2\x2\xF8\xF9\at\x2\x2\xF9\xFA\ak\x2\x2\xFA\xFB");
		sb.Append("\ar\x2\x2\xFB\xFD\av\x2\x2\xFC\xC4\x3\x2\x2\x2\xFC\xC6\x3\x2");
		sb.Append("\x2\x2\xFC\xCA\x3\x2\x2\x2\xFC\xCE\x3\x2\x2\x2\xFC\xD4\x3\x2");
		sb.Append("\x2\x2\xFC\xDA\x3\x2\x2\x2\xFC\xE0\x3\x2\x2\x2\xFC\xE4\x3\x2");
		sb.Append("\x2\x2\xFC\xEB\x3\x2\x2\x2\xFC\xF6\x3\x2\x2\x2\xFD\x36\x3\x2");
		sb.Append("\x2\x2\xFE\xFF\t\x3\x2\x2\xFF\x38\x3\x2\x2\x2\x100\x101\t\x4");
		sb.Append("\x2\x2\x101:\x3\x2\x2\x2\x102\x103\a\x32\x2\x2\x103\x107\aZ");
		sb.Append("\x2\x2\x104\x105\a\x32\x2\x2\x105\x107\az\x2\x2\x106\x102\x3");
		sb.Append("\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x109\x3\x2\x2\x2\x108\x10A");
		sb.Append("\x5=\x1F\x2\x109\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B");
		sb.Append("\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C<\x3\x2\x2\x2\x10D");
		sb.Append("\x10F\t\x5\x2\x2\x10E\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2");
		sb.Append("\x110\x10E\x3\x2\x2\x2\x110\x111\x3\x2\x2\x2\x111>\x3\x2\x2");
		sb.Append("\x2\x112\x114\a\x30\x2\x2\x113\x115\x5\x39\x1D\x2\x114\x113");
		sb.Append("\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116");
		sb.Append("\x117\x3\x2\x2\x2\x117@\x3\x2\x2\x2\x118\x11A\t\x6\x2\x2\x119");
		sb.Append("\x11B\t\a\x2\x2\x11A\x119\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2");
		sb.Append("\x11B\x11D\x3\x2\x2\x2\x11C\x11E\x5\x39\x1D\x2\x11D\x11C\x3");
		sb.Append("\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x11F\x120");
		sb.Append("\x3\x2\x2\x2\x120\x42\x3\x2\x2\x2\x121\x127\x5\x37\x1C\x2\x122");
		sb.Append("\x126\x5\x37\x1C\x2\x123\x126\x5\x39\x1D\x2\x124\x126\a\x61");
		sb.Append("\x2\x2\x125\x122\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125\x124");
		sb.Append("\x3\x2\x2\x2\x126\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x127");
		sb.Append("\x128\x3\x2\x2\x2\x128\x44\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2");
		sb.Append("\x12A\x12B\a&\x2\x2\x12B\x12C\x5=\x1F\x2\x12C\x12D\x5=\x1F\x2");
		sb.Append("\x12D\x12E\x5=\x1F\x2\x12E\x12F\x5=\x1F\x2\x12F\x130\x5=\x1F");
		sb.Append("\x2\x130\x131\x5=\x1F\x2\x131\x132\x5=\x1F\x2\x132\x133\x5=");
		sb.Append("\x1F\x2\x133\x46\x3\x2\x2\x2\x134\x13A\a)\x2\x2\x135\x136\a");
		sb.Append("^\x2\x2\x136\x139\a)\x2\x2\x137\x139\n\b\x2\x2\x138\x135\x3");
		sb.Append("\x2\x2\x2\x138\x137\x3\x2\x2\x2\x139\x13C\x3\x2\x2\x2\x13A\x138");
		sb.Append("\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13D\x3\x2\x2\x2\x13C");
		sb.Append("\x13A\x3\x2\x2\x2\x13D\x13E\a)\x2\x2\x13EH\x3\x2\x2\x2\x13F");
		sb.Append("\x144\a$\x2\x2\x140\x143\a$\x2\x2\x141\x143\n\t\x2\x2\x142\x140");
		sb.Append("\x3\x2\x2\x2\x142\x141\x3\x2\x2\x2\x143\x146\x3\x2\x2\x2\x144");
		sb.Append("\x142\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x147\x3\x2\x2\x2");
		sb.Append("\x146\x144\x3\x2\x2\x2\x147\x148\a$\x2\x2\x148J\x3\x2\x2\x2");
		sb.Append("\x149\x14B\t\a\x2\x2\x14A\x149\x3\x2\x2\x2\x14A\x14B\x3\x2\x2");
		sb.Append("\x2\x14B\x14D\x3\x2\x2\x2\x14C\x14E\x5\x39\x1D\x2\x14D\x14C");
		sb.Append("\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x14F");
		sb.Append("\x150\x3\x2\x2\x2\x150L\x3\x2\x2\x2\x151\x153\t\a\x2\x2\x152");
		sb.Append("\x151\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x165\x3\x2\x2\x2");
		sb.Append("\x154\x156\x5\x39\x1D\x2\x155\x154\x3\x2\x2\x2\x156\x159\x3");
		sb.Append("\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15A");
		sb.Append("\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15C\x5? \x2\x15B\x15D");
		sb.Append("\x5\x41!\x2\x15C\x15B\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D");
		sb.Append("\x166\x3\x2\x2\x2\x15E\x160\x5\x39\x1D\x2\x15F\x15E\x3\x2\x2");
		sb.Append("\x2\x160\x161\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161\x162\x3");
		sb.Append("\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\x5\x41!\x2\x164\x166");
		sb.Append("\x3\x2\x2\x2\x165\x157\x3\x2\x2\x2\x165\x15F\x3\x2\x2\x2\x166");
		sb.Append("N\x3\x2\x2\x2\x167\x16A\x5K&\x2\x168\x16A\x5M\'\x2\x169\x167");
		sb.Append("\x3\x2\x2\x2\x169\x168\x3\x2\x2\x2\x16AP\x3\x2\x2\x2\x18\x2");
		sb.Append("\xFC\x106\x10B\x110\x116\x11A\x11F\x125\x127\x138\x13A\x142");
		sb.Append("\x144\x14A\x14F\x152\x157\x15C\x161\x165\x169\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace QbScript.Language
